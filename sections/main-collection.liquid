{%- liquid
  assign active_values_count = 0

  for filter in collection.filters
    if filter.type == 'price_range'
      if filter.max_value.value != blank or filter.min_value.value != blank
        assign active_values_count = active_values_count | plus: 1
      endif
    else
      assign active_values_count = active_values_count | plus: filter.active_values.size
    endif
  endfor

  if section.settings.quick_links_menu.links.size > 0 or section.settings.show_filters and collection.filters.size > 0
    assign show_filters = true
  else
    assign show_filters = false
  endif

  # First, we retrieve, based on the merchant settings, the user preferences and the available space the most appropriate size
  assign products_mobile_grid_mode = cart.attributes.products_mobile_grid_mode

  if request.design_mode
    # In the theme editor we do not use the choice selected manually, to reduce confusion when changing the theme editor values
    assign products_desktop_grid_mode = section.settings.products_size_desktop
  elsif section.settings.show_grid_mode_selector
    assign products_desktop_grid_mode = cart.attributes.products_desktop_grid_mode | default: section.settings.products_size_desktop
  else
    assign products_desktop_grid_mode = section.settings.products_size_desktop
  endif

  if products_mobile_grid_mode == blank or request.design_mode
    if section.settings.products_per_row_mobile == '1'
      assign products_mobile_grid_mode = 'large'
    else
      assign products_mobile_grid_mode = 'medium'
    endif
  endif

  # Adjust products per page for variant collection to ensure consistent pagination
  assign products_per_page = section.settings.products_per_page
  # if section.settings.variant_collection
  #   # Ensure we always fetch at least 4 products
  #   assign products_per_page = products_per_page | at_least: 4
  # endif
-%}

{%- comment -%}
------------------------------------------------------------------------------------------------------------------------
CSS
------------------------------------------------------------------------------------------------------------------------
{%- endcomment -%}

<style>
  #shopify-section-{{ section.id }} {
    --product-list-horizontal-spacing-factor: {{ section.settings.horizontal_spacing_factor }};
    --product-list-vertical-spacing-factor: {{ section.settings.vertical_spacing_factor }};
    --collection-swatch-size: {{ section.settings.color_swatch_size }}px;

    {% comment %}On mobile, it's simple! No sidebar or whatever{% endcomment %}
    --collection-items-per-row-medium: 2;

    {% comment %}On mobile, it's simple! No sidebar or whatever{% endcomment %}
    --product-list-max-items-per-row-allowed: 99 !important; {% comment %}On collection page, we explicitly set a number of items so we don't want this{% endcomment %}
  }

  #shopify-section-{{ section.id }} .product-list {
    --product-list-max-items-per-row-allowed: 99 !important; {% comment %}On collection page, we explicitly set a number of items so we don't want this{% endcomment %}
  }

  @media screen and (min-width: 700px) {
    #shopify-section-{{ section.id }} {
      {% comment %}On tablet, we do not have any sidebar, so we can fix it{% endcomment %}
      --collection-items-per-row-compact: 4;
      --collection-items-per-row-medium: 3;
      --collection-items-per-row-large: 2;
    }
  }

  @media screen and (min-width: 1000px) {
    #shopify-section-{{ section.id }} {
      {%- comment -%}Starting from 1000px it starts to get funky, as we can have or not the sidebar{%- endcomment -%}

      {%- if section.settings.filter_layout == 'sidebar' and show_filters -%}
        --collection-items-per-row-compact: 4;
        --collection-items-per-row-medium: 3;
        --collection-items-per-row-large: 2;
      {%- else -%}
        --collection-items-per-row-compact: 6;
        --collection-items-per-row-medium: 4;
        --collection-items-per-row-large: 3;
      {%- endif -%}
    }

    #shopify-section-{{ section.id }} .collection {
      {%- if section.settings.filter_layout == 'sidebar' and show_filters -%}
        --collection-grid-template: var(--collection-sidebar-width, 0) minmax(0,1fr);
      {%- endif -%}
    }
  }

  @media screen and (min-width: 1400px) {
    #shopify-section-{{ section.id }} {
      {%- comment -%}Starting from 1400px we can afford having more content even in sidebar mode{%- endcomment -%}

      {%- if section.settings.filter_layout == 'sidebar' and show_filters -%}
        --collection-items-per-row-compact: 6;
        --collection-items-per-row-medium: 4;
        --collection-items-per-row-large: 3;
      {%- endif -%}
    }
  }

  /* Add to sidecart button styling */
  .add-to-sidecart {
    display: none;
  }

  /* Variant collection specific styles */
  {%- if section.settings.variant_collection -%}
    .justify-items-center {
      justify-items: flex-start;
    }

    @media screen and (min-width: 700px) {
      .sm\:gap-12 {
        gap: 1.5rem;
      }
    }
  {%- else -%}
    .justify-items-center {
      justify-items: flex-start;
    }

 
  {%- endif -%}

  .justify-center {
    justify-content: flex-start;
}
  .product-card__info {
    text-align: left;
    justify-items: left;
  }

  .debug-info {
    background-color: #f8f8f8;
    padding: 10px;
    margin-top: 10px;
    margin-bottom: 10px;
    font-family: monospace;
    font-size: 12px;
    border: 1px solid #ddd;
  }

  /* Drawer-specific styles for color swatches */
  .drawer-color-swatch {
    width: var(--collection-swatch-size, 30px);
    height: var(--collection-swatch-size, 30px);
    cursor: pointer;
  }

  .drawer-color-swatch.is-selected {
    outline: 2px solid #000;
    outline-offset: 1px;
  }
  
  /* Collection filter styles */
  .collection-color-filter {
    display: flex;
    flex-direction: column;
    width: 100%;
    margin-bottom: 30px;
    --swatch-size: {{ section.settings.color_swatch_size }}px;
  }
  
  .collection-color-filter-title {
    font-size: 18px;
    font-weight: 500;
    margin-bottom: 15px;
  }
  
  .collection-color-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: {{ section.settings.color_filter_gap }}px;
    justify-content: flex-start;
  }
  
  /* Text button style */
  .collection-color-button {
    border: 1px solid #e6e6e6;
    background: white;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    text-align: center;
    transition: all 0.2s ease;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 100px;
  }
  
  .collection-color-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
  }
  
  .collection-color-button.selected {
    background: #000;
    color: white;
    border-color: #000;
  }
  
  .color-count-badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    margin-left: 8px;
    font-size: 0.85em;
    background: rgba(0,0,0,0.1);
    padding: 2px 8px;
    border-radius: 12px;
    font-weight: normal;
  }

  .collection-color-button.selected .color-count-badge {
    background: rgba(255,255,255,0.2);
  }
  
  /* Color swatch style for groups */
  .color-swatch[data-group] {
    cursor: pointer;
    position: relative;
    width: var(--collection-swatch-size);
    height: var(--collection-swatch-size);
    border: 1px solid #e6e6e6;
    transition: all 0.2s ease;
  }
  
  .color-swatch[data-group]:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
  }
  
  .color-swatch[data-group].selected {
    outline: 2px solid #000;
    outline-offset: 1px;
  }
  
  .color-swatch[data-group] .color-count-badge {
    position: absolute;
    bottom: -5px;
    right: -8px;
    font-size: 10px;
    padding: 1px 5px;
    line-height: 1;
    background: rgba(0,0,0,0.8);
    color: white;
    border-radius: 8px;
    margin: 0;
  }

  .color-swatch {
    margin: unset !important;
  }

  /* Styling for the additional swatches indicator */
  .additional-swatches-indicator {
    display: none; /* Hide this indicator */
  }

  /* Simple count indicator */
  .count-indicator {
    font-size: 12px;
    margin-left: 2px;
    color: #666;
    display: inline-block;
    line-height: var(--swatch-size, 1.375rem);
    vertical-align: middle;
    cursor: pointer;
  }

  .count-indicator:hover {
    color: #333;
    text-decoration: underline;
  }

  /* Hidden swatch class */
  .hidden-swatch {
    display: none !important;
  }

  @media screen and (max-width: 749px) {
    .collection-color-button {
      font-size: 12px;
      min-width: 80px;
    }
    
    .color-count-badge {
      font-size: 0.75em;
      padding: 1px 6px;
    }
  }


  .variant-group-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }

  .variant-group-button {
    padding: 8px 16px;
    border: 1px solid #e6e6e6;
    font-family: var(--heading-font-family);
    font-weight: var(--heading-font-weight);
    font-style: var(--heading-font-style);
    letter-spacing: var(--heading-letter-spacing);
    text-transform: var(--heading-text-transform);
    overflow-wrap: anywhere;
    background: white;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.2s ease;
  }

  .variant-group-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .variant-group-button.selected {
    background: #000;
    color: white;
    border-color: #000;
  }

  .variant-count {
    margin-left: 6px;
    font-size: 0.85em;
    opacity: 0.7;
  }

  .collection-toolbar__button .variant-count {
    margin-left: 6px;
    font-size: 0.85em;
    opacity: 0.7;
  }

  .collection-toolbar__button.is-active .variant-count {
    opacity: 1;
  }

  @media screen and (min-width: 700px) {
    .collection-toolbar__button-list {
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .collection-toolbar__button-container {
      flex: 0 1 auto;
      min-width: auto;
      border: none !important;
    }
  }
</style>

{%- comment -%}
------------------------------------------------------------------------------------------------------------------------
LIQUID
------------------------------------------------------------------------------------------------------------------------
{%- endcomment -%}

<div class="color-scheme color-scheme--{{ section.settings.color_scheme.id }}">
  <div class="container">
    <div class="v-stack gap-6 sm:gap-12">
      {%- if collection.all_products_count == 0 -%}
        <div class="empty-state">
          <div class="prose">
            <h1 class="h4">{{ collection.title }}</h1>
            <p>{{ 'collection.general.empty_collection' | t }}</p>

            {%- assign button_content = 'collection.general.continue_shopping' | t -%}
            {%- render 'button', href: routes.all_products_collection_url, size: 'xl', content: button_content -%}
          </div>
        </div>
      {%- else -%}
        {%- if show_filters or section.settings.show_sort_by or section.settings.show_grid_mode_selector or section.settings.show_results_count -%}
          <height-observer variable="collection-toolbar" class="collection-toolbar full-bleed">
            <div class="collection-toolbar__button-list">
              {%- if show_filters -%}
                <div class="collection-toolbar__button-container {% if section.settings.filter_layout == 'sidebar' %}md:hidden{% endif %}">
                  <button type="button" aria-controls="facets-drawer" style="font-size: 1rem; color: black;" class="collection-toolbar__button heading text-xxs w-full">
                    {{- 'collection.faceting.filter_button' | t }} {% if active_values_count > 0 %}({{ active_values_count }}){% endif -%}
                  </button>
                </div>
              {%- endif -%}

              {%- if section.settings.show_sort_by -%}
                {%- assign selected_sort_by_value = collection.sort_by | default: collection.default_sort_by -%}

                <div class="collection-toolbar__button-container">
                  <button type="button" aria-controls="sort-by-popover" style="display: none;" class="collection-toolbar__button heading text-xxs w-full">
                    <span class="text-with-icon justify-center">
                      {{- 'collection.faceting.sort_by' | t -}}
                      {%- render 'icon' with 'chevron-down' -%}
                    </span>
                  </button>

                  <facets-sort-popover id="sort-by-popover" section-id="{{ section.id }}" class="popover popover--bottom-end color-scheme color-scheme--dialog" close-on-listbox-select>
                    <p class="h4" slot="header">{{ 'collection.faceting.sort_by' | t }}</p>

                    <x-listbox class="popover__value-list">
                      {%- for sort_option in collection.sort_options -%}
                        {%- if sort_option.name != blank -%}
                          <button type="button" class="popover__value-option group" role="option" value="{{ sort_option.value }}" {% if sort_option.value == selected_sort_by_value %}aria-selected="true"{% endif %}>
                            <span class="reversed-link">{{ sort_option.name }}</span>
                          </button>
                        {%- endif -%}
                      {%- endfor -%}
                    </x-listbox>
                  </facets-sort-popover>
                </div>
              {%- endif -%}
            </div>

            {%- if section.settings.show_results_count -%}
              <p class="collection-toolbar__products-count h6 text-subdued md-max:hidden">
                {{ 'collection.products_count' | t: count: collection.products_count }}
              </p>
            {%- endif -%}

            {%- if section.settings.show_grid_mode_selector -%}
              <collection-layout-switch device="mobile" class="collection-toolbar__layout-switch-list sm:hidden" aria-controls="product-list-{{ section.id }}">
                <button type="button" value="large" class="collection-toolbar__button {% if products_mobile_grid_mode == 'large' %}is-active{% endif %}" aria-label="Switch to larger product images">{%- render 'icon' with 'collection-layout-1' -%}</button>
                <button type="button" value="medium" class="collection-toolbar__button {% if products_mobile_grid_mode == 'medium' %}is-active{% endif %}" aria-label="Switch to smaller product images">{%- render 'icon' with 'collection-layout-2' -%}</button>
              </collection-layout-switch>

              <collection-layout-switch device="desktop" class="collection-toolbar__layout-switch-list sm-max:hidden" aria-controls="product-list-{{ section.id }}">
                <button type="button" value="large" class="collection-toolbar__button {% if products_desktop_grid_mode == 'large' %}is-active{% endif %}" aria-label="Switch to larger product images">{%- render 'icon' with 'collection-layout-2' -%}</button>
                <button type="button" value="medium" class="collection-toolbar__button {% if products_desktop_grid_mode == 'medium' %}is-active{% endif %}" aria-label="Switch to smaller product images">{%- render 'icon' with 'collection-layout-3' -%}</button>
                <button type="button" value="compact" class="collection-toolbar__button {% if products_desktop_grid_mode == 'compact' %}is-active{% endif %}" aria-label="Switch to compact product images">{%- render 'icon' with 'collection-layout-4' -%}</button>
              </collection-layout-switch>
            {%- endif -%}
          </height-observer>
        {%- endif -%}

        <div class="collection">
          {%- if section.settings.variant_collection and section.settings.enable_color_groups -%}
            <div class="collection-color-filter">
              <div class="collection-color-filter-title">{{ section.settings.color_groups_title }}</div>
              
              <div class="collection-color-buttons" 
                   style="gap: {{ section.settings.color_groups_gap }}px;">
                {% comment %} Show all colors button {% endcomment %}
                <button 
                  class="collection-color-button selected"
                  id="color-group-all"
                  data-group="all"
                  onclick="filterByColorGroup('all', this)"
                  style="
                    border-radius: {{ section.settings.color_groups_radius }}px;
                    padding: {{ section.settings.color_groups_padding_v }}px {{ section.settings.color_groups_padding_h }}px;
                  "
                >
                  All Colors
                </button>

                {% comment %} Parse and create color group buttons {% endcomment %}
                {%- assign color_groups = section.settings.color_groups | newline_to_br | split: '<br />' -%}
                {%- for group in color_groups -%}
                  {%- assign group_parts = group | split: '|' -%}
                  {%- if group_parts.size >= 3 -%}
                    {%- assign group_name = group_parts[0] | strip -%}
                    {%- assign group_variants = group_parts[1] | strip -%}
                    {%- assign group_color = group_parts[2] | strip -%}
                    
                    {%- if section.settings.color_groups_style == 'button' -%}
                      <button 
                        class="collection-color-button"
                        id="color-group-{{ block.settings.group_name | handle }}"
                        data-group="{{ block.settings.group_name | escape }}"
                        data-variants="{{ block.settings.color_variants | escape }}"
                        onclick="filterByColorGroup('{{ block.settings.group_name | escape }}', this)"
                        style="
                          border-radius: {{ section.settings.color_groups_radius }}px;
                          padding: {{ section.settings.color_groups_padding_v }}px {{ section.settings.color_groups_padding_h }}px;
                        "
                      >
                        {{ block.settings.group_name }}
                        <span class="color-count-badge"></span>
                      </button>
                    {%- else -%}
                      <button 
                        class="color-swatch {% if settings.round_color_swatches %}rounded-full{% endif %}"
                        id="color-group-{{ block.settings.group_name | handle }}"
                        data-group="{{ block.settings.group_name | escape }}"
                        data-variants="{{ block.settings.color_variants | escape }}"
                        onclick="filterByColorGroup('{{ block.settings.group_name | escape }}', this)"
                        style="--swatch-background: {{ block.settings.group_color }}"
                        title="{{ block.settings.group_name | escape }}"
                      >
                        <span class="sr-only">{{ block.settings.group_name }}</span>
                        <span class="color-count-badge"></span>
                      </button>
                    {%- endif -%}
                  {%- endif -%}
                {%- endfor -%}
              </div>

              <div style="margin-top: 12px; font-size: 14px; color: #666;">
                Showing <span id="visible-products-count">{{ collection.products_count }}</span> products
              </div>

              <div id="no-products-message" style="display: none; margin-top: 30px; padding: 20px; background-color: #f8f8f8; border-radius: 5px; text-align: center;">
                <p style="margin: 0; font-size: 16px; color: #333;">No products match your selected filters.</p>
                <p style="margin-top: 10px; font-size: 14px; color: #666;">Try selecting different colors or <a href="#" onclick="filterByColorGroup('all', document.querySelector('[data-group=\'all\']')); return false;" style="color: #000; text-decoration: underline;">view all products</a>.</p>
              </div>
            </div>
          {%- endif -%}

          {%- if section.settings.variant_collection and section.settings.enable_variant_grouping -%}
            <div class="variant-group-filter">
              <div class="variant-group-buttons" style="gap: 10px;">
                <button 
                  class="variant-group-button selected"
                  data-group="all"
                  onclick="filterVariantsByGroup('all', this)"
                >
                  {%- if shop.locale == 'en' -%}
                    All Colors
                  {%- else -%}
                    Alle Farben
                  {%- endif -%}
                </button>

                {%- assign groups = section.settings.variant_groups | newline_to_br | split: '<br />' -%}
                {%- for group in groups -%}
                  {%- assign group_parts = group | split: ':' -%}
                  {%- if group_parts.size >= 2 -%}
                    {%- assign group_name = group_parts[0] | strip -%}
                    {%- assign variants = group_parts[1] | strip -%}
                    <button 
                      class="variant-group-button"
                      data-group="{{ group_name | escape }}"
                      data-variants="{{ variants | escape }}"
                      onclick="filterVariantsByGroup('{{ group_name | escape }}', this)"
                    >
                      {{ group_name }}
                      <span class="variant-count"></span>
                    </button>
                  {%- endif -%}
                {%- endfor -%}
              </div>
            </div>

            <div style="margin-top: 12px; font-size: 14px; color: #666;">
              Showing <span id="visible-products-count">{{ collection.products_count }}</span> products
            </div>

            <div id="no-products-message" style="display: none; margin-top: 30px; padding: 20px; background-color: #f8f8f8; border-radius: 5px; text-align: center;">
              <p style="margin: 0; font-size: 16px; color: #333;">No products match your selected filters.</p>
              <p style="margin-top: 10px; font-size: 14px; color: #666;">Try selecting different colors or <a href="#" onclick="filterVariantsByGroup('all', document.querySelector('[data-group=\'all\']')); return false;" style="color: #000; text-decoration: underline;">view all products</a>.</p>
            </div>
          {%- endif -%}

          {%- if show_filters -%}
            <facets-drawer id="facets-drawer" class="facets-drawer drawer drawer--sm color-scheme color-scheme--dialog {% if section.settings.filter_layout == 'sidebar' %}md:hidden{% endif %}">
              <p class="h4" slot="header">{{ 'collection.faceting.filters' | t }}</p>

              {%- render 'facets', results: collection, show_filters: section.settings.show_filters, open_filters_by_default: section.settings.open_filters_by_default, update_on_change: false, quick_links_menu: section.settings.quick_links_menu, context: 'drawer' -%}

              <div slot="footer">
                {%- assign button_content = 'collection.faceting.apply_filters' | t -%}

                <dialog-close-button class="contents">
                  {%- render 'button', type: 'button', content: button_content, stretch: true -%}
                </dialog-close-button>
              </div>
            </facets-drawer>

            {%- if section.settings.filter_layout == 'sidebar' -%}
              <safe-sticky class="facets-sidebar md-max:hidden">
                {%- render 'facets', results: collection, show_filters: section.settings.show_filters, open_filters_by_default: section.settings.open_filters_by_default, update_on_change: true, quick_links_menu: section.settings.quick_links_menu, context: 'sidebar' -%}
              </safe-sticky>
            {%- endif -%}
          {%- endif -%}

          <product-list id="product-list-{{ section.id }}" class="product-list" collection-mobile-layout="{{ products_mobile_grid_mode }}" collection-desktop-layout="{{ products_desktop_grid_mode }}">
            {%- for product in collection.products -%}
              {%- if section.settings.variant_collection -%}
                {%- render 'color-variant', 
                    product: product, 
                    reveal: settings.stagger_products_apparition, 
                    hide_product_information: section.settings.hide_product_information, 
                    stacked: true,
                    filtered_colors: section.settings.filtered_colors,
                    enable_color_filter: section.settings.enable_color_filter
                -%}
              {%- else -%}
                {%- render 'product-card', 
                    product: product, 
                    reveal: settings.stagger_products_apparition, 
                    hide_product_information: section.settings.hide_product_information, 
                    stacked: true
                -%}
              {%- endif -%}
            {%- endfor -%}
          </product-list>
        </div>
      {%- endif -%}
    </div>
  </div>
</div>

<script>
  // Enable console debug for color filtering
  if (localStorage.getItem('showColorFilterDebug') === 'true') {
    // Debug removed;
    localStorage.removeItem('showColorFilterDebug');
  }

  // Hide excess swatches on page load
  document.addEventListener('DOMContentLoaded', function() {
    const fieldsets = document.querySelectorAll('.product-card__info fieldset');
    fieldsets.forEach(fieldset => {
      const swatches = fieldset.querySelectorAll('.color-swatch');
      if (swatches.length > 7) {
        swatches.forEach((swatch, index) => {
          if (index >= 7) {
            swatch.classList.add('hidden-swatch');
          }
        });
      }
    });
  });

  // Handle count indicator clicks
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('count-indicator') || e.target.closest('.count-indicator')) {
      const indicator = e.target.classList.contains('count-indicator') ? 
                       e.target : 
                       e.target.closest('.count-indicator');
      
      const fieldset = indicator.closest('fieldset');
      
      if (fieldset) {
        // Find the product card containing this swatch
        const productCard = fieldset.closest('.product-card');
        
        if (productCard) {
          // Find the product URL from the product card link
          const productLink = productCard.querySelector('.product-title');
          
          if (productLink && productLink.href) {
            // Navigate to the product page
            window.location.href = productLink.href;
          }
        }
      }
    }
  });

  // Helper function for updating URL parameters in a browser-compatible way
  function updateUrlParams(paramsToUpdate, paramsToRemove) {
    var currentUrl = window.location.href;
    var urlBase = currentUrl.split('?')[0]; // Get base URL without parameters
    var params = {};
    
    // Parse existing query parameters
    var searchParams = window.location.search.substring(1).split('&');
    for (var i = 0; i < searchParams.length; i++) {
      if (searchParams[i]) {
        var pair = searchParams[i].split('=');
        params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');
      }
    }
    
    // Update parameters
    for (var key in paramsToUpdate) {
      params[key] = paramsToUpdate[key];
    }
    
    // Remove parameters
    if (paramsToRemove) {
      for (var i = 0; i < paramsToRemove.length; i++) {
        delete params[paramsToRemove[i]];
      }
    }
    
    // Build new query string
    var newParams = [];
    for (var key in params) {
      if (params.hasOwnProperty(key)) {
        newParams.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));
      }
    }
    
    // Return new URL
    return urlBase + (newParams.length > 0 ? '?' + newParams.join('&') : '');
  }

  // Add a utility function to normalize color strings for better comparison
  function normalizeColorString(colorStr) {
    if (!colorStr) return '';
    return colorStr.trim().toLowerCase();
  }

  // Update the count of currently visible products
  function updateVisibleCount() {
    const visibleProducts = document.querySelectorAll('.product-card-wrapper[style=""]').length + 
                           document.querySelectorAll('.product-card-wrapper:not([style])').length;
    
    const countDisplay = document.getElementById('visible-products-count');
    if (countDisplay) {
      countDisplay.textContent = visibleProducts;
    }
    
    // Show/hide the "no products" message
    const noProductsMessage = document.getElementById('no-products-message');
    if (noProductsMessage) {
      if (visibleProducts === 0) {
        noProductsMessage.style.display = 'block';
      } else {
        noProductsMessage.style.display = 'none';
      }
    }
  }

  // Store active color groups
  let activeColorGroups = [];

  // Function to filter products by color group
  function filterVariantsByGroup(groupName, button) {
    if (groupName === 'all') {
      // If clicking "All Colors", deselect all other buttons and show all products
      document.querySelectorAll('.variant-group-button').forEach(btn => {
        btn.classList.remove('selected');
      });
      button.classList.add('selected');
      activeColorGroups = [];
      
      // Show all products
      const productCards = document.querySelectorAll('.product-card-wrapper');
      productCards.forEach(card => {
        card.style.display = '';
      });
    } else {
      // Remove "All" selection if other buttons are clicked
      const allButton = document.querySelector('.variant-group-button[data-group="all"]');
      allButton.classList.remove('selected');

      // Toggle selection of clicked button
      button.classList.toggle('selected');

      // Update active groups
      const groupIndex = activeColorGroups.indexOf(groupName);
      if (groupIndex === -1) {
        // Add group if not already selected
        activeColorGroups.push(groupName);
      } else {
        // Remove group if already selected
        activeColorGroups.splice(groupIndex, 1);
      }

      // If no groups are selected, automatically select "All"
      if (activeColorGroups.length === 0) {
        allButton.classList.add('selected');
        const productCards = document.querySelectorAll('.product-card-wrapper');
        productCards.forEach(card => {
          card.style.display = '';
        });
        updateVisibleCount();
        return;
      }

      // Filter products based on all selected groups
      const productCards = document.querySelectorAll('.product-card-wrapper');
      productCards.forEach(card => {
        const cardColor = normalizeColorString(card.getAttribute('data-color') || '');
        
        // Check if the card's color matches any of the selected groups
        const isVisible = activeColorGroups.some(groupName => {
          const groupButton = document.querySelector(`.variant-group-button[data-group="${groupName}"]`);
          const groupVariants = groupButton.getAttribute('data-variants')
            .split(',')
            .map(v => normalizeColorString(v.trim()));
          return groupVariants.includes(cardColor);
        });

        card.style.display = isVisible ? '' : 'none';
      });
    }

    // Update visible count
    updateVisibleCount();
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', function() {
    updateVariantCounts();
  });

  // Update counts for each variant group
  function updateVariantCounts() {
    const productCards = document.querySelectorAll('.product-card-wrapper');
    
    // Update counts for each group button
    document.querySelectorAll('.variant-group-button').forEach(button => {
      if (button.getAttribute('data-group') === 'all') {
        const count = productCards.length;
        const countElement = button.querySelector('.variant-count');
        if (countElement) {
          countElement.textContent = `(${count})`;
        } else {
          const span = document.createElement('span');
          span.className = 'variant-count';
          span.textContent = `(${count})`;
          button.appendChild(span);
        }
      } else {
        const groupVariants = button.getAttribute('data-variants')
          .split(',')
          .map(v => normalizeColorString(v.trim()));
        
        let count = 0;
        productCards.forEach(card => {
          const cardColor = normalizeColorString(card.getAttribute('data-color') || '');
          if (groupVariants.includes(cardColor)) {
            count++;
          }
        });
        
        const countElement = button.querySelector('.variant-count');
        if (countElement) {
          countElement.textContent = `(${count})`;
        } else {
          const span = document.createElement('span');
          span.className = 'variant-count';
          span.textContent = `(${count})`;
          button.appendChild(span);
        }
      }
    });
  }
</script>

{% schema %}
{
  "name": "t:sections.main_collection.name",
  "class": "shopify-section--main-collection",
  "tag": "section",
  "settings": [
    {
      "type": "checkbox",
      "id": "variant_collection",
      "label": "Variant Collection",
      "info": "Select if you want to show color variants instead of product cards"
    },
    {
      "type": "header",
      "content": "Variant Collection Grouping"
    },
    {
      "type": "checkbox",
      "id": "enable_variant_grouping",
      "label": "Enable Variant Grouping",
      "default": false,
      "info": "Group variant cards by color categories"
    },
    {
      "type": "textarea",
      "id": "variant_groups",
      "label": "Variant Groups",
      "info": "Define groups to filter variants. One group per line. Format: Group Name: variant1, variant2, variant3",
      "default": "Blues: Light Blue, Navy Blue, Sky Blue\nEarth Tones: Brown, Beige, Sand\nMonochrome: Black, White, Grey",
      "placeholder": "Blues: Light Blue, Navy Blue, Sky Blue"
    },

    {
      "type": "range",
      "id": "color_groups_gap",
      "min": 5,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Button Spacing",
      "default": 10
    },
    {
      "type": "range",
      "id": "color_groups_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Button Border Radius",
      "default": 4
    },
    {
      "type": "range",
      "id": "color_groups_padding_v",
      "min": 5,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Button Vertical Padding",
      "default": 8
    },
    {
      "type": "range",
      "id": "color_groups_padding_h",
      "min": 10,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Button Horizontal Padding",
      "default": 16
    },
    {
      "type": "header",
      "content": "Color Filtering"
    },

    {
      "type": "checkbox",
      "id": "enable_color_filter",
      "label": "Enable theme editor color filtering",
      "default": false,
      "info": "When enabled in theme editor mode, only products with specified colors will be shown"
    },
    {
      "type": "text",
      "id": "filtered_colors",
      "label": "Colors to show (theme editor mode)",
      "info": "Enter color names separated by commas (e.g., 'Sand, Blue, Red')",
      "default": "Sand"
    },
    {
      "type": "header", 
      "content": "Client-side Color Filter Settings"
    },
    {
      "type": "text",
      "id": "color_filter_title",
      "label": "Filter Title",
      "default": "Filter by color:"
    },

    {
      "type": "range",
      "id": "color_swatch_size",
      "min": 20,
      "max": 50,
      "step": 1,
      "unit": "px",
      "label": "Color Swatch Size",
      "default": 30,
      "info": "Size (width and height) for swatch style buttons. Only applies if 'Color Swatch' style is selected."
    },

    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:global.colors.scheme",
      "default": "scheme-1"
    },
    {
      "type": "checkbox",
      "id": "hide_product_information",
      "label": "t:global.product_list.hide_product_information",
      "info": "t:global.product_list.hide_product_information_collection_info"
    },
    {
      "type": "header",
      "content": "t:global.product_list.product_list_category"
    },
    {
      "type": "range",
      "id": "products_per_page",
      "label": "t:global.faceting.products_per_page",
      "min": 8,
      "max": 50,
      "step": 1,
      "default": 48
    },
    {
      "type": "select",
      "id": "products_per_row_mobile",
      "label": "t:global.product_list.products_per_row_mobile",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "default": "2"
    },
    {
      "type": "select",
      "id": "products_size_desktop",
      "label": "t:global.product_list.products_size_desktop",
      "info": "t:global.product_list.products_size_desktop_info",
      "options": [
        {
          "value": "compact",
          "label": "t:global.product_list.products_size_desktop_options.compact"
        },
        {
          "value": "medium",
          "label": "t:global.product_list.products_size_desktop_options.medium"
        },
        {
          "value": "large",
          "label": "t:global.product_list.products_size_desktop_options.large"
        }
      ],
      "default": "medium"
    },
    {
      "type": "checkbox",
      "id": "show_grid_mode_selector",
      "label": "t:global.product_list.show_grid_mode_selector",
      "info": "t:global.product_list.show_grid_mode_selector_info",
      "default": true
    },
    {
      "type": "header",
      "content": "t:global.product_list.spacing_category",
      "info": "t:global.product_list.spacing_category_info"
    },
    {
      "type": "range",
      "min": 0.2,
      "max": 2,
      "step": 0.1,
      "id": "horizontal_spacing_factor",
      "label": "t:global.product_list.horizontal_spacing_factor",
      "default": 1
    },
    {
      "type": "range",
      "min": 0.2,
      "max": 2,
      "step": 0.1,
      "id": "vertical_spacing_factor",
      "label": "t:global.product_list.vertical_spacing_factor",
      "default": 1
    },
    {
      "type": "header",
      "content": "t:global.faceting.filters_and_sorting_category"
    },
    {
      "type": "select",
      "id": "filter_layout",
      "label": "t:global.faceting.desktop_layout",
      "options": [
        {
          "value": "sidebar",
          "label": "t:global.faceting.desktop_layout_options.sidebar"
        },
        {
          "value": "drawer",
          "label": "t:global.faceting.desktop_layout_options.drawer"
        }
      ],
      "default": "sidebar"
    },
    {
      "type": "link_list",
      "id": "quick_links_menu",
      "label": "t:sections.main_collection.quick_links_menu",
      "info": "t:sections.main_collection.quick_links_menu_info"
    },
    {
      "type": "checkbox",
      "id": "show_sort_by",
      "label": "t:global.faceting.show_sort_by",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_filters",
      "label": "t:global.faceting.show_filters",
      "info": "t:global.faceting.show_filters_info",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_results_count",
      "label": "t:global.faceting.show_results_count",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_filter_group_name",
      "label": "t:global.faceting.show_group_name",
      "info": "t:global.faceting.show_group_name_info",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_filter_values_count",
      "label": "t:global.faceting.show_filter_values_count",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "open_filters_by_default",
      "label": "t:global.faceting.open_filters_by_default",
      "default": false
    }
  ],
  "blocks": [
    {
      "type": "color_group",
      "name": "Color Group",
      "settings": [
        {
          "type": "text",
          "id": "group_name",
          "label": "Group Name",
          "info": "Name of the filter group (e.g., Blue Tones)"
        },
        {
          "type": "textarea",
          "id": "color_variants",
          "label": "Color Variants",
          "info": "Enter color variant names, separated by commas (e.g., Light Blue, Navy Blue, Sky Blue)"
        },
        {
          "type": "color",
          "id": "group_color",
          "label": "Group Color",
          "info": "Color to represent this group (for swatch style)"
        }
      ]
    }
  ]
}
{% endschema %}